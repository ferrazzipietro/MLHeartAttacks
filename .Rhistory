g5 <- g + geom_boxplot(aes(x=as_factor(BP), fill=BP), coef=2.5) +
labs(title="",x="", y = "", color="BP")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g6 <- g + geom_boxplot(aes(x=as_factor(Anaemia), fill=Anaemia), coef=2.5) +
labs(title="",x="", y = "", color="Anaemia")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
ggarrange(g1,g2,g3,g4,g5,g6,
ncol = 3, nrow = 2) %>% annotate_figure(top=text_grob("Creatinine",
face="bold"))
g <- ggplot(data %>% filter(CPK<4000), aes(y=CPK))
g1 <- g + geom_boxplot(aes(x=as_factor(Event), fill=Event)) +
labs(title="",x="", y = "", color="Event")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g2 <- g + geom_boxplot(aes(x=as_factor(Gender), fill=Gender)) +
labs(title="",x="", y = "", color="Gender")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g3 <- g + geom_boxplot(aes(x=as_factor(Smoking), fill=Smoking)) +
labs(title="",x="", y = "", color="Smoking")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g4 <- g + geom_boxplot(aes(x=as_factor(Diabetes), fill=Diabetes)) +
labs(title="",x="", y = "", color="Diabetes")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g5 <- g + geom_boxplot(aes(x=as_factor(BP), fill=BP)) +
labs(title="",x="", y = "", color="BP")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
g6 <- g + geom_boxplot(aes(x=as_factor(Anaemia), fill=Anaemia)) +
labs(title="",x="", y = "", color="Anaemia")  +
scale_fill_brewer(palette="Blues") +
theme_minimal()
ggarrange(g1,g2,g3,g4,g5,g6,
ncol = 3, nrow = 2) %>% annotate_figure(top=text_grob("CPK", face="bold"))
mycolors <- c("0"="royalblue", "1"="lightblue")
g <- ggplot(data, aes(col=Event))
g1 <- g + geom_point(aes(x=Sodium, y=Age),lwd=2) +
scale_fill_manual(values = mycolors,
aesthetics = c("colour", "fill"))
g2 <- g + geom_point(aes(x=Sodium,  y=Creatinine),lwd=2) +
scale_fill_manual(values = mycolors,
aesthetics = c("colour", "fill"))
g3 <- g + geom_point(aes(x=Sodium, y=CPK),lwd=2) +
scale_fill_manual(values = mycolors,
aesthetics = c("colour", "fill"))
g4 <- g + geom_point(aes(x=Sodium, y=Pletelets),lwd=2) +
scale_fill_manual(values = mycolors,
aesthetics = c("colour", "fill"))
g5 <- g + geom_point(aes(x=Sodium, y=Ejection.Fraction),lwd=2) +
scale_fill_manual(values = mycolors,
aesthetics = c("colour", "fill"))
g6 <- g + geom_point(aes(x=CPK, y=Age),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g7 <- g + geom_point(aes(x=CPK, y=Creatinine),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g8 <- g + geom_point(aes(x=CPK, y=Pletelets),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g9 <- g + geom_point(aes(x=Creatinine, y=Ejection.Fraction),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g10 <- g + geom_point(aes(x=Pletelets, y=Creatinine),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g11 <- g + geom_point(aes(x=Pletelets, y=Age),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g12 <- g + geom_point(aes(x=Pletelets, y=Ejection.Fraction),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g13 <- g + geom_point(aes(x=Age, y=CPK),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g14 <- g + geom_point(aes(x=Age, y=Ejection.Fraction),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
g15 <- g + geom_point(aes(x=CPK, y=Ejection.Fraction),lwd=2) +   scale_fill_manual(values = mycolors,      aesthetics = c("colour", "fill"))
ggarrange(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,g11,g12,g13,g14,g15,
ncol = 3, nrow = 5, common.legend = TRUE) %>%
annotate_figure(top=text_grob("Distribution of events over pairs of var", face="bold"))
s1 <- Surv(data$TIME, data$Event)
surv_m1 <- survfit(s1~data$Gender, error="greenwood",
conf.type="log", se.fit=TRUE, conf.int=0.95,
data=data)
par(mfrow=c(3,2))
g <- list()
Evento <- as.numeric(levels(as.factor(data$Event)))[as.factor(data$Event)]
data$Evento=Evento
g[[1]] <- ggsurvplot(survfit(Surv(TIME, (Evento))~Gender, data=data),
conf.int=T, pval.method=T, log.rank.weights="1", data=data, palette = c("navy","lightblue"), legend="none", font.tickslab = c(50)) + labs(x="Time", y="Survival for Gender") + theme_survminer(font.x = c(8, "plain", "black"), font.y = c(8, "plain", "black"), legend="none")
g[[2]] <- ggsurvplot(survfit(Surv(TIME, (Evento))~Smoking, data=data),
conf.int=T, pval.method=T, log.rank.weights="1", data=data, palette = c("navy","lightblue"), legend="none") + labs(x="Time", y="Survival for Smoking")+ theme_survminer(font.x = c(8, "plain", "black"), font.y = c(8, "plain", "black"), legend="none")
g[[3]] <- ggsurvplot(survfit(Surv(TIME, (Evento))~Diabetes, data=data),
conf.int=T, pval.method=T, log.rank.weights="1", data=data, palette = c("navy","lightblue"), legend="none") + labs(x="Time", y="Survival for Diabetes")+ theme_survminer(font.x = c(8, "plain", "black"), font.y = c(8, "plain", "black"), legend="none")
g[[4]] <- ggsurvplot(survfit(Surv(TIME, (Evento))~BP, data=data),
conf.int=T, pval.method=T, log.rank.weights="1", data=data, palette = c("navy","lightblue"), legend="none") + labs(x="Time", y="Survival for BP")+ theme_survminer(font.x = c(8, "plain", "black"), font.y = c(8, "plain", "black"), legend="none")
g[[5]] <- ggsurvplot(survfit(Surv(TIME, (Evento))~Anaemia, data=data),
conf.int=T, pval.method=T, log.rank.weights="1", data=data, palette = c("navy","lightblue"), legend="none") + labs(x="Time", y="Survival for Anaemia")+ theme_survminer(font.x = c(8, "plain", "black"), font.y = c(8, "plain", "black"), legend="none")
arrange_ggsurvplots(g, print = TRUE,
ncol = 2, nrow = 3, risk.table.height = 0.4)
# ggarrange(g1,g2,g3,g4,g5,
#           ncol = 2, nrow = 3) %>%
#   annotate_figure(top=text_grob("Distribution of events over pairs of var",
#                                 face="bold"))
ss <- survdiff(Surv(TIME, Evento)~Gender+Smoking+Diabetes+BP+Anaemia, data=data, rho=0)
# ggsurvplot(surv_fit(Surv(TIME, Evento)~Gender+Smoking+Diabetes+BP+Anaemia, data=data))
df <- nrow(ss$var)-1
data$Evento <- NULL
exponential_survreg <- survreg(Surv(TIME,Event)~Gender+Smoking+Diabetes+BP+
Anaemia+Age+Ejection.Fraction+Creatinine+Pletelets,
data=data.table, dist="weibull")
summary(exponential_survreg)$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Diabetes+
Smoking:Pletelets+
Smoking:BP+
Smoking:Anaemia+
Smoking:Age+
Smoking:Ejection.Fraction+
Smoking:Creatinine+
Gender+Diabetes+Pletelets+BP+Anaemia+Age+Ejection.Fraction+Creatinine,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0 )
s <- summary(final)
# s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Pletelets:Diabetes+
Pletelets:Pletelets+
Pletelets:BP+
Pletelets:Anaemia+
Pletelets:Age+
Pletelets:Ejection.Fraction+
Pletelets:Creatinine+
Diabetes+Pletelets+BP+Anaemia+Age+Ejection.Fraction+Creatinine,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
#s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Pletelets:Diabetes+
Pletelets:Pletelets+
Pletelets:BP+
Pletelets:Anaemia+
Pletelets:Age+
Pletelets:Ejection.Fraction+
Pletelets:Creatinine+
Diabetes+Pletelets+BP+Anaemia+Age+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Anaemia:Diabetes+
Anaemia:BP+
Anaemia:Ejection.Fraction+
Anaemia:Creatinine+
Diabetes+Pletelets+BP+Anaemia+Age+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
# drop Anaemia
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Diabetes+
Age:BP+
Age:Ejection.Fraction+
Age:Creatinine+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Ejection.Fraction+
Diabetes:BP+
Diabetes:Creatinine+
Diabetes:Ejection.Fraction+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Ejection.Fraction+
Diabetes:Ejection.Fraction+
BP:Creatinine+
BP:Ejection.Fraction+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
exponential_survreg <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Ejection.Fraction+
Diabetes:Ejection.Fraction+
Creatinine:Ejection.Fraction+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Creatinine+Gender,
data=data.table, dist="weibull")
final <- stepAIC(exponential_survreg, trace=0)
s <- summary(final)
# s$table %>% round(2)
# final model
final <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Ejection.Fraction+
Diabetes:Ejection.Fraction+
Creatinine:Ejection.Fraction+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Gender,
data=data.table, dist="weibull")
# summary(final)$table %>% row.names()
# final model
final <- survreg(Surv(TIME,Event)~
Smoking:Gender+
Smoking:Age+
Pletelets:Gender+
Age:Ejection.Fraction+
Diabetes:Ejection.Fraction+
Creatinine:Ejection.Fraction+
Pletelets+Age+Diabetes+BP+Ejection.Fraction+Gender,
data=data.table, dist="weibull", scale=1)
s <- summary(final)
s$table[,4] %>% round(2)
y_pred= predict(final, na.action = "na.omit", type="linear")
rS <- ( log(data.table$TIME) - y_pred ) # res standardizzati
rSo = sort(unique(rS))
Sres = survfit(Surv(rS,data.table$Event)~1, ctype=2 ) # "fleming-harrington"
plot(rSo,log(-log(Sres$surv)), xlim=c(-7,1),
xlab="Cox-Snell residuals",
ylab="Log of Cumulative Lazard",
main="Goodness of the Final Survival Model",
col = "navy",
pch=19,
cex=0.7)
abline(0,1, lwd=3, col="lightblue")
m1 <- glm(Event ~ CPK + Creatinine, data=data, family=binomial, )
summary(m1)
m2 <- glm(Event ~ CPK + I(CPK^2) + I(CPK^3) , data=data, family=binomial)
summary(m2)
r1 <- as.matrix(round(summary(m1)$coef[2:3,4],2))
colnames(r1) <- "Pval"
r2 <- as.matrix(round(summary(m2)$coef[2:4,4],2))
colnames(r2) <- "Pval"
data_surv_tot <- tot %>%
dplyr::select(c(-TIME, -CPK, -Anaemia, Pletelets, Age, Diabetes, BP, Ejection.Fraction,
Gender, Smoking, Creatinine)) %>%
add_column( Smoking_Gender = (tot$Smoking %>% as.numeric)  * (tot$Gender%>% as.numeric) ) %>%
add_column( Smoking_Age = (tot$Smoking%>% as.numeric) * tot$Age) %>%
add_column( Gender_Pletelets = (tot$Gender%>% as.numeric) * tot$Pletelets) %>%
add_column( Age_Ejection.Fraction = tot$Age * tot$Ejection.Fraction) %>%
add_column( Ejection.Fraction_Diabetes = tot$Ejection.Fraction * (tot$Diabetes%>% as.numeric)) %>%
add_column( Ejection.Fraction_Creatinine = tot$Ejection.Fraction * tot$Creatinine)
data_classif <- as.data.frame(data) %>% dplyr::select(-TIME) %>%
mutate_at(vars(Gender, Smoking, Diabetes, BP, Anaemia), as.numeric)
classif_task <- makeClassifTask(id = "HeartFailure", data = data_classif, target = "Event", positive = 1) # data only contains training data
set.seed(12345)
desc_inner <- makeResampleInstance("RepCV", reps = 5,  folds = 2, task = classif_task, stratify = TRUE)
# https://mlr.mlr-org.com/articles/tutorial/integrated_learners.html
classif_measures <- list(acc, tpr)
classif_pipeline <- cpoScaleRange()
## GLM ##
library(glmnet)
classif_lrn_glm <- makeLearner("classif.glmnet", id = "glm", predict.type = "prob")
classif_lrn_glm <- classif_pipeline %>>% classif_lrn_glm
## Naive Bayes ##
classif_lrn_naive <- makeLearner("classif.naiveBayes", id = "naive", predict.type = "prob")
classif_lrn_naive <- classif_pipeline %>>% classif_lrn_naive
## KNN Model ##
library(kknn)
classif_lrn_knn <- makeLearner("classif.kknn", id = "knn", predict.type = "prob")
classif_lrn_knn <- classif_pipeline %>>% classif_lrn_knn
## Tree(rpart) ##
classif_lrn_rpart <- makeLearner("classif.rpart", id = "rpart", predict.type = "prob")
classif_lrn_rpart <- classif_pipeline %>>% classif_lrn_rpart
## Random Forest ##
classif_lrn_rf <- makeLearner("classif.randomForest", id = "rf", predict.type = "prob")
classif_lrn_rf <- classif_pipeline %>>% classif_lrn_rf
## Ranger ##
classif_lrn_ranger <- makeLearner("classif.ranger", id = "ranger", predict.type = "prob")
classif_lrn_ranger <- classif_pipeline %>>% classif_lrn_ranger
## Neural Net ##
# library(neuralnet)
classif_lrn_neuralnet <- makeLearner("classif.neuralnet", id = "neuralnet", predict.type = "prob")
classif_lrn_neuralnet <- classif_pipeline %>>% classif_lrn_neuralnet
## Extreme Gradient Boosting ##
classif_lrn_xgboost <- makeLearner("classif.xgboost", id = "xgboost", eval_metric = "aucpr", predict.type = "prob")
classif_lrn_xgboost <- classif_pipeline %>>% classif_lrn_xgboost
learners <- list(classif_lrn_glm, classif_lrn_naive, classif_lrn_knn, classif_lrn_rpart,
classif_lrn_rf, classif_lrn_ranger,
classif_lrn_neuralnet, classif_lrn_xgboost)
library(parallelMap)
parallelStartSocket(4) # start in socket mode and create 2 processes on localhost
set.seed(12345)
bmr_classif <- benchmark(learners    = learners,
tasks       = classif_task,
resamplings = desc_inner,
measures    = classif_measures,
models      = TRUE,
show.info   = TRUE)
parallelStop()
data_fs <- data %>% dplyr::select(-TIME)
fs_task <- makeClassifTask(id = "HeartFailure", data = data_fs, target = "Event", positive = 1)
library(FSelectorRcpp)
fv <- generateFilterValuesData(fs_task, method = "FSelectorRcpp_information.gain")
plotFilterValues(fv, feat.type.cols = TRUE) + scale_fill_brewer(palette="Blues") + ggpubr::theme_pubr() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=9),
title = element_text(size = 10)) +
ggtitle("Filter Selection \n Information Gain")
data_fs <- data %>% dplyr::select(Creatinine, Ejection.Fraction, Event, Age)
fs_task <- makeClassifTask(id = "HeartFailure", data = data_fs, target = "Event", positive = 1)
set.seed(12345)
desc_inner_fs <- makeResampleInstance("RepCV", reps = 5,  folds = 2, task = fs_task, stratify = TRUE)
data_fs <- data %>% dplyr::select(Creatinine, Ejection.Fraction, Event, Age)
fs_task <- makeClassifTask(id = "HeartFailure", data = data_fs, target = "Event", positive = 1)
set.seed(12345)
desc_inner_fs <- makeResampleInstance("RepCV", reps = 5,  folds = 2, task = fs_task, stratify = TRUE)
# https://mlr.mlr-org.com/articles/tutorial/integrated_learners.html
# Using the same learners defined in previous chunk
parallelStartSocket(4) # start in socket mode and create 2 processes on localhost
set.seed(12345)
bmr_fs <- benchmark(learners    = learners,
tasks       = fs_task,
resamplings = desc_inner_fs,
measures    = classif_measures,
models      = TRUE,
show.info   = FALSE)
parallelStop()
bp1 <- plotBMRBoxplots(bmr_classif,
measure   = tpr,
order.lrn = getBMRLearnerIds(bmr_classif))  +
aes(fill = learner.id)  +
labs(x = "", y = "True Positive Rate") + scale_fill_brewer(palette="Blues")+
ylim(0,0.8) + ggtitle("True positive rate with all the features")
bp3 <- plotBMRBoxplots(bmr_fs,
measure   = tpr,
order.lrn = getBMRLearnerIds(bmr_classif))  +
aes(fill = learner.id)  +
labs(x = "", y = "True Positive Rate (FSel)") + scale_fill_brewer(palette="Blues") +
ylim(0,0.8) + ggtitle("True positive rate with selected features")
ggarrange(bp1, bp3, ncol = 2, nrow = 1, common.legend = TRUE, legend = "right")
bls <- list(makeLearner("classif.kknn"),
makeLearner("classif.rpart"),
makeLearner("classif.randomForest"),
makeLearner("classif.ranger"),
makeLearner("classif.xgboost", eval_metric = "aucpr"),
makeLearner("classif.neuralnet"))
lrn <- makeModelMultiplexer(bls)
# Parameter Space (all together, divided by learner inside)
ps <- makeModelMultiplexerParamSet(
multiplexer = lrn,
classif.kknn = makeParamSet(makeIntegerParam("k", lower = 5, upper = 15)), # Default is 7-
classif.rpart = makeParamSet(makeIntegerParam("minsplit", lower = 15, upper = 35), # Default is 20
makeIntegerParam("maxdepth", lower = 15, upper = 50)), # Default is 30
classif.randomForest = makeParamSet(makeIntegerParam("ntree", lower = 200, upper = 700), #Default is 500
makeIntegerParam("mtry",lower = 1, upper = 2), #Default is floor(sy,qrt(features/3)), cannot be larger than number of variables
makeIntegerParam("nodesize", lower = 1, upper = 50)), #Default is 1
classif.ranger = makeParamSet(makeIntegerParam("mtry", lower = 1, upper = 2), # Same parameters as randomForest
makeIntegerParam("num.trees", lower = 200, upper = 700),
makeIntegerParam("min.node.size", lower = 1, upper = 50)),
classif.xgboost = makeParamSet(makeNumericParam("eta", lower = 0.2, upper = 0.5), # Default is 0.3
makeIntegerParam("nrounds", lower = 4, upper = 10), # Default is
makeIntegerParam("max_depth", lower = 3, upper = 10)), # Default is 6
classif.neuralnet = makeParamSet(makeIntegerVectorParam("hidden", len = 1, lower = 1, upper = 10),
makeNumericParam("threshold", lower = 2, upper = 5, trafo = function(x) {10^x}),
makeNumericParam("stepmax", lower = 2, upper = 3, trafo = function(x) {10^x}))
)
# Random Search
control_grid <- makeTuneControlRandom(maxit = 500L) # Default is 100, split between the amount of learners
parallelStartSocket(5) # start in socket mode and create 2 processes on localhost
set.seed(12345)
tuning_results_all <- tuneParams(learner = lrn,
task = classif_task,
resampling = desc_inner,
par.set = ps,
control = control_grid,
measures = list(acc, tpr),
show.info = TRUE)
set.seed(12345)
tuning_results_fs <- tuneParams(learner = lrn,
task = fs_task,
resampling = desc_inner,
par.set = ps,
control = control_grid,
measures = list(acc, tpr),
show.info = TRUE)
parallelStop()
tuning_results_all
tuning_results_fs
# Obtaining best iteration for each learner (selecting features)
res_iters_fs <- getTuneResultOptPath(tuning_results_fs)
best_res <- res_iters_fs %>% group_by(selected.learner) %>% slice(which.max(tpr.test.mean)) %>%
relocate(tpr.test.mean, .after = selected.learner)
library(reshape)
options(scipen=999)
temp <- melt(as.data.frame(best_res)) %>% dplyr::select(-error.message) %>% drop_na()
tpr.test <- temp %>% filter(grepl("tpr", variable)) %>% dplyr::rename(tpr = value) %>% dplyr::select(-variable)
hyperparam <- temp %>% filter(grepl("classif", variable))
tuning_res <- full_join(hyperparam, tpr.test) %>%
mutate(parameter = ifelse(grepl("\\.", variable), sub(".*\\.(.*)", "\\1", variable), "")) %>%
dplyr::select(selected.learner, tpr, parameter, value)
rm(temp, tpr.test, hyperparam)
#tuning_res
# The outer partitioning was defined in the beginning of the document, we just have to update the preprocess of the data
final_data <- as.data.frame(tot) %>% dplyr::select(Creatinine, Ejection.Fraction, Event, Age)
desc_outer <- makeResampleDesc("Holdout", split = 3/4, stratify = TRUE)
final_task <- makeClassifTask(id = "HeartFailure", data = final_data, target = "Event", positive = 1)
set.seed(12345)
partition_outer <- makeResampleInstance(desc_outer, final_task)
prueba_learner <- makeLearner("classif.ranger", mtry=1, num.trees=625, min.node.size=35)
set.seed(12345)
prueba_results <- resample(learner = prueba_learner,
task = final_task,
resampling = partition_outer,
measures = list(tpr),
models = TRUE,
show.info = TRUE)
data_surv <- as.data.frame(data_surv_tot[train.idxs,]) %>% mutate_at(vars(Gender, Smoking, Diabetes, BP), as.numeric)
surv_task <- makeClassifTask(id = "HeartFailure", data = data_surv, target = "Event", positive = 1)
set.seed(12345)
desc_inner_surv <- makeResampleInstance("RepCV", reps = 5,  folds = 2, task = surv_task, stratify = TRUE)
# learners, search space and control grid previously defined
parallelStartSocket(5)
set.seed(12345)
tuning_results_surv <- tuneParams(learner = lrn,
task = surv_task,
resampling = desc_inner_surv,
par.set = ps,
control = control_grid,
measures = list(acc, tpr),
show.info = FALSE)
parallelStop()
tuning_results_surv
fv2 <- generateFilterValuesData(surv_task, method = "FSelectorRcpp_information.gain")
#  randomForestSRC_importance
plotFilterValues(fv2, feat.type.cols = TRUE) + ggpubr::theme_pubr() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=9),
title = element_text(size=8)) +
ggtitle("Filter Selection \n Information Gain") + scale_fill_brewer(palette="Blues")
# fv2$data[order(-value)]
data_surv_fs <- as.data.frame(data_surv) %>% dplyr::select(Event, Creatinine, Ejection.Fraction, Ejection.Fraction_Diabetes, Age)
surv_task_fs <- makeClassifTask(id = "HeartFailure", data = data_surv_fs, target = "Event", positive = 1)
set.seed(12345)
desc_inner_surv_fs <- makeResampleInstance("RepCV", reps = 5,  folds = 2, task = surv_task_fs, stratify = TRUE)
# learners, search space and control grid previously defined
parallelStartSocket(5)
set.seed(12345)
tuning_results_surv_fs <- tuneParams(learner = lrn,
task = surv_task_fs,
resampling = desc_inner_surv_fs,
par.set = ps,
control = control_grid,
measures = list(acc, tpr),
show.info = FALSE)
parallelStop()
# Obtaining best iteration for each learner (selecting features)
res_iters_surv_fs <- getTuneResultOptPath(tuning_results_surv_fs)
best_res_surv <- res_iters_surv_fs %>% group_by(selected.learner) %>% slice(which.max(tpr.test.mean)) %>%
relocate(tpr.test.mean, .after = selected.learner)
temp2 <- melt(as.data.frame(best_res_surv)) %>% dplyr::select(-error.message) %>% drop_na()
tpr.test <- temp2 %>% filter(grepl("tpr", variable)) %>% dplyr::rename(tpr = value) %>% dplyr::select(-variable)
hyperparam <- temp2 %>% filter(grepl("classif", variable))
tuning_res_surv <- full_join(hyperparam, tpr.test) %>%
mutate(parameter = ifelse(grepl("\\.", variable), sub(".*\\.(.*)", "\\1", variable), "")) %>%
dplyr::select(selected.learner, tpr, parameter, value)
rm(temp2, tpr.test, hyperparam)
#tuning_res_surv
final_data_surv <- data_surv_tot %>% dplyr::select(Event, Creatinine, Ejection.Fraction, Ejection.Fraction_Diabetes, Age)
final_surv_task <- makeClassifTask(id = "HeartFailure", data = final_data_surv, target = "Event", positive = 1)
set.seed(12345)
partition_outer_surv <- makeResampleInstance(desc_outer, final_surv_task)
# prueba_learner <- makeLearner("classif.rpart", minsplit = 21, maxdepth = 5)
# prueba_learner <- makeLearner("classif.ranger", mtry = 2, num.trees = 1230, min.node.size = 39)
prueba_learner <- makeLearner("classif.randomForest", mtry = 2, ntree = 344, nodesize = 34)
set.seed(12345)
prueba_results_surv <- resample(learner = prueba_learner,
task = final_surv_task,
resampling = partition_outer_surv,
measures = list(tpr),
models = TRUE,
show.info = TRUE)
prueba_results_surv <- resample(learner = prueba_learner_all,
task = final_surv_task,
resampling = partition_outer_surv,
measures = list(tpr),
models = TRUE,
show.info = TRUE)
final_data_surv <- data_surv_tot %>% dplyr::select(Event, Creatinine, Ejection.Fraction, Ejection.Fraction_Diabetes, Age)
final_surv_task <- makeClassifTask(id = "HeartFailure", data = final_data_surv, target = "Event", positive = 1)
set.seed(12345)
partition_outer_surv <- makeResampleInstance(desc_outer, final_surv_task)
# prueba_learner <- makeLearner("classif.rpart", minsplit = 21, maxdepth = 5)
# prueba_learner <- makeLearner("classif.ranger", mtry = 2, num.trees = 1230, min.node.size = 39)
prueba_learner <- makeLearner("classif.randomForest", mtry = 2, ntree = 344, nodesize = 34)
prueba_learner_all <- makeLearner("classif.randomForest", mtry = 2, ntree = 345, nodesize = 20)
set.seed(12345)
prueba_results_surv <- resample(learner = prueba_learner_all,
task = final_surv_task,
resampling = partition_outer_surv,
measures = list(tpr),
models = TRUE,
show.info = TRUE)
